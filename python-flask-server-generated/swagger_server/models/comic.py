# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Comic(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, title: str=None, author: str=None, price: float=None, genre: str=None):  # noqa: E501
        """Comic - a model defined in Swagger

        :param id: The id of this Comic.  # noqa: E501
        :type id: int
        :param title: The title of this Comic.  # noqa: E501
        :type title: str
        :param author: The author of this Comic.  # noqa: E501
        :type author: str
        :param price: The price of this Comic.  # noqa: E501
        :type price: float
        :param genre: The genre of this Comic.  # noqa: E501
        :type genre: str
        """
        self.swagger_types = {
            'id': int,
            'title': str,
            'author': str,
            'price': float,
            'genre': str
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'author': 'author',
            'price': 'price',
            'genre': 'genre'
        }
        self._id = id
        self._title = title
        self._author = author
        self._price = price
        self._genre = genre

    @classmethod
    def from_dict(cls, dikt) -> 'Comic':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Comic of this Comic.  # noqa: E501
        :rtype: Comic
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Comic.

        Unique identifier of the comic  # noqa: E501

        :return: The id of this Comic.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Comic.

        Unique identifier of the comic  # noqa: E501

        :param id: The id of this Comic.
        :type id: int
        """

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Comic.

        Title of the comic  # noqa: E501

        :return: The title of this Comic.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Comic.

        Title of the comic  # noqa: E501

        :param title: The title of this Comic.
        :type title: str
        """

        self._title = title

    @property
    def author(self) -> str:
        """Gets the author of this Comic.

        Author of the comic  # noqa: E501

        :return: The author of this Comic.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this Comic.

        Author of the comic  # noqa: E501

        :param author: The author of this Comic.
        :type author: str
        """

        self._author = author

    @property
    def price(self) -> float:
        """Gets the price of this Comic.

        Price of the comic  # noqa: E501

        :return: The price of this Comic.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Comic.

        Price of the comic  # noqa: E501

        :param price: The price of this Comic.
        :type price: float
        """

        self._price = price

    @property
    def genre(self) -> str:
        """Gets the genre of this Comic.

        Genre of the comic  # noqa: E501

        :return: The genre of this Comic.
        :rtype: str
        """
        return self._genre

    @genre.setter
    def genre(self, genre: str):
        """Sets the genre of this Comic.

        Genre of the comic  # noqa: E501

        :param genre: The genre of this Comic.
        :type genre: str
        """

        self._genre = genre
